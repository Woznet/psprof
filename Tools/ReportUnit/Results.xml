<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="91" errors="0" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="1" invalid="0" date="2024-10-15" time="18:46:08">
  <environment nunit-version="2.5.8.0" platform="Microsoft Windows 11 Pro Insider Preview|C:\WINDOWS|\Device\Harddisk0\Partition3" user="jimmy" os-version="10.0.27723" clr-version="8.0.8" user-domain="DESKTOP-MSI" machine-name="DESKTOP-MSI" cwd="X:\system\powershell-profile" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="TestFixture" name="Pester" executed="True" result="Ignored" success="True" time="3.2549" asserts="0" description="Pester">
    <results>
      <test-suite type="TestFixture" name="X:\system\powershell-profile\Tests\Windows\Defender.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0665" asserts="0" description="X:\system\powershell-profile\Tests\Windows\Defender.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Windows Defender Checks" executed="True" result="Ignored" success="True" time="0.0044" asserts="0" description="Windows Defender Checks">
            <results>
              <test-case description="Checks Defender Exclusions Exist for PowerShell" name="Windows Defender Checks.Checks Defender Exclusions Exist for PowerShell" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="X:\system\powershell-profile\Tests\Windows\Explorer.Tests.ps1" executed="True" result="Success" success="True" time="0.0785" asserts="0" description="X:\system\powershell-profile\Tests\Windows\Explorer.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Windows File Explorer Configuration and Setup" executed="True" result="Success" success="True" time="0.0201" asserts="0" description="Windows File Explorer Configuration and Setup">
            <results>
              <test-case description="Checks that File Explorer registry path exists" name="Windows File Explorer Configuration and Setup.Checks that File Explorer registry path exists" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that File Explorer is set to open new &quot;Home&quot; by default" name="Windows File Explorer Configuration and Setup.Checks that File Explorer is set to open new &quot;Home&quot; by default" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that hidden files are shown" name="Windows File Explorer Configuration and Setup.Checks that hidden files are shown" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that file extensions are shown" name="Windows File Explorer Configuration and Setup.Checks that file extensions are shown" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="X:\system\powershell-profile\Tests\Windows\Git.Tests.ps1" executed="True" result="Success" success="True" time="0.4302" asserts="0" description="X:\system\powershell-profile\Tests\Windows\Git.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Testing Git Configuration Values" executed="True" result="Success" success="True" time="0.3748" asserts="0" description="Testing Git Configuration Values">
            <results>
              <test-case description="Checks a global git configuration file exists" name="Testing Git Configuration Values.Checks a global git configuration file exists" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that user.email is set and valid" name="Testing Git Configuration Values.Checks that user.email is set and valid" time="0.0648" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that init.defaultBranch is set and is &quot;main&quot;" name="Testing Git Configuration Values.Checks that init.defaultBranch is set and is &quot;main&quot;" time="0.06" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that gpg.program is set and is a valid executable" name="Testing Git Configuration Values.Checks that gpg.program is set and is a valid executable" time="0.0609" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that user.signingkey is set" name="Testing Git Configuration Values.Checks that user.signingkey is set" time="0.0601" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that commit.gpgSign is set" name="Testing Git Configuration Values.Checks that commit.gpgSign is set" time="0.0594" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that tag.forceSignAnnotated is set" name="Testing Git Configuration Values.Checks that tag.forceSignAnnotated is set" time="0.0613" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="X:\system\powershell-profile\Tests\Windows\InstalledApps.Tests.ps1" executed="True" result="Success" success="True" time="0.1433" asserts="0" description="X:\system\powershell-profile\Tests\Windows\InstalledApps.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Installed Applications" executed="True" result="Success" success="True" time="0.0889" asserts="0" description="Installed Applications">
            <results>
              <test-case description="Checks that Git is installed" name="Installed Applications.Checks that Git is installed" time="0.0122" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that Node.js is installed" name="Installed Applications.Checks that Node.js is installed" time="0.0186" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that npm is installed" name="Installed Applications.Checks that npm is installed" time="0.0247" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that Python is installed" name="Installed Applications.Checks that Python is installed" time="0.0126" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that Docker is installed" name="Installed Applications.Checks that Docker is installed" time="0.0105" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that Visual Studio Code is installed" name="Installed Applications.Checks that Visual Studio Code is installed" time="0.0061" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="X:\system\powershell-profile\Tests\Windows\InstalledModules.Tests.ps1" executed="True" result="Success" success="True" time="0.1391" asserts="0" description="X:\system\powershell-profile\Tests\Windows\InstalledModules.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Installed PowerShell Modules" executed="True" result="Success" success="True" time="0.0815" asserts="0" description="Installed PowerShell Modules">
            <results>
              <test-suite type="ParameterizedTest" name="Installed PowerShell Modules.Checks that the &lt;ModuleName&gt; module is installed" executed="True" result="Success" success="True" time="0.0774" asserts="0" description="Checks that the &lt;ModuleName&gt; module is installed">
                <results>
                  <test-case description="Checks that the  module is installed" name="Installed PowerShell Modules.Checks that the  module is installed" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checks that the  module is installed" name="Installed PowerShell Modules.Checks that the  module is installed" time="0.0063" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checks that the  module is installed" name="Installed PowerShell Modules.Checks that the  module is installed" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checks that the  module is installed" name="Installed PowerShell Modules.Checks that the  module is installed" time="0.0025" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checks that the  module is installed" name="Installed PowerShell Modules.Checks that the  module is installed" time="0.0026" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checks that the  module is installed" name="Installed PowerShell Modules.Checks that the  module is installed" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checks that the  module is installed" name="Installed PowerShell Modules.Checks that the  module is installed" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checks that the  module is installed" name="Installed PowerShell Modules.Checks that the  module is installed" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checks that the  module is installed" name="Installed PowerShell Modules.Checks that the  module is installed" time="0.0025" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checks that the  module is installed" name="Installed PowerShell Modules.Checks that the  module is installed" time="0.0065" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checks that the  module is installed" name="Installed PowerShell Modules.Checks that the  module is installed" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checks that the  module is installed" name="Installed PowerShell Modules.Checks that the  module is installed" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checks that the  module is installed" name="Installed PowerShell Modules.Checks that the  module is installed" time="0.0025" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checks that the  module is installed" name="Installed PowerShell Modules.Checks that the  module is installed" time="0.0025" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checks that the  module is installed" name="Installed PowerShell Modules.Checks that the  module is installed" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checks that the  module is installed" name="Installed PowerShell Modules.Checks that the  module is installed" time="0.0026" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checks that the  module is installed" name="Installed PowerShell Modules.Checks that the  module is installed" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checks that the  module is installed" name="Installed PowerShell Modules.Checks that the  module is installed" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checks that the  module is installed" name="Installed PowerShell Modules.Checks that the  module is installed" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checks that the  module is installed" name="Installed PowerShell Modules.Checks that the  module is installed" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checks that the  module is installed" name="Installed PowerShell Modules.Checks that the  module is installed" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checks that the  module is installed" name="Installed PowerShell Modules.Checks that the  module is installed" time="0.0025" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checks that the  module is installed" name="Installed PowerShell Modules.Checks that the  module is installed" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Checks that the  module is installed" name="Installed PowerShell Modules.Checks that the  module is installed" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="X:\system\powershell-profile\Tests\Windows\Network.Tests.ps1" executed="True" result="Success" success="True" time="0.2028" asserts="0" description="X:\system\powershell-profile\Tests\Windows\Network.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="PowerShell Networking Tests" executed="True" result="Success" success="True" time="0.1413" asserts="0" description="PowerShell Networking Tests">
            <results>
              <test-case description="Checks internet connection from a powershell shell" name="PowerShell Networking Tests.Checks internet connection from a powershell shell" time="0.022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that TLS 1.2 is on system" name="PowerShell Networking Tests.Checks that TLS 1.2 is on system" time="0.0015" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that TLS 1.2 is available" name="PowerShell Networking Tests.Checks that TLS 1.2 is available" time="0.0017" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that TLS 1.3 is available" name="PowerShell Networking Tests.Checks that TLS 1.3 is available" time="0.0015" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that TLS 1.1 is not available" name="PowerShell Networking Tests.Checks that TLS 1.1 is not available" time="0.0016" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that TLS 1.0 is not available" name="PowerShell Networking Tests.Checks that TLS 1.0 is not available" time="0.0015" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that SSL 3.0 is not available" name="PowerShell Networking Tests.Checks that SSL 3.0 is not available" time="0.0014" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that TLS 1.2 is default" name="PowerShell Networking Tests.Checks that TLS 1.2 is default" time="0.0015" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks EncryptionPolicy" name="PowerShell Networking Tests.Checks EncryptionPolicy" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks DefaultConnectionLimit" name="PowerShell Networking Tests.Checks DefaultConnectionLimit" time="0.0016" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks for Registry Keys for .NET Framework Version 4+ for Strong Cryptography (64bit)" name="PowerShell Networking Tests.Checks for Registry Keys for .NET Framework Version 4+ for Strong Cryptography (64bit)" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks for Registry Keys for .NET Framework Version 4+ for Strong Cryptography (32bit)" name="PowerShell Networking Tests.Checks for Registry Keys for .NET Framework Version 4+ for Strong Cryptography (32bit)" time="0.0025" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks the Window AutoTuning Levels are set to Normal" name="PowerShell Networking Tests.Checks the Window AutoTuning Levels are set to Normal" time="0.0627" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that ScalingHeristics are Disabled" name="PowerShell Networking Tests.Checks that ScalingHeristics are Disabled" time="0.0151" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that ECN Capability is Disabled" name="PowerShell Networking Tests.Checks that ECN Capability is Disabled" time="0.0132" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="X:\system\powershell-profile\Tests\Windows\PowerShell.Tests.ps1" executed="True" result="Success" success="True" time="0.1038" asserts="0" description="X:\system\powershell-profile\Tests\Windows\PowerShell.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="PowerShell Core Installation Checks" executed="True" result="Success" success="True" time="0.0292" asserts="0" description="PowerShell Core Installation Checks">
            <results>
              <test-case description="Checks if PowerShell Core Stable Version is installed" name="PowerShell Core Installation Checks.Checks if PowerShell Core Stable Version is installed" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks if Installed Stable PowerShell Core Version is 7+" name="PowerShell Core Installation Checks.Checks if Installed Stable PowerShell Core Version is 7+" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks if PowerShell Core Preview Version is installed" name="PowerShell Core Installation Checks.Checks if PowerShell Core Preview Version is installed" time="0.003" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks if Installed Preview PowerShell Core Version is correct" name="PowerShell Core Installation Checks.Checks if Installed Preview PowerShell Core Version is correct" time="0.0026" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that Stable PowerShell Installed Executable is on system PATH" name="PowerShell Core Installation Checks.Checks that Stable PowerShell Installed Executable is on system PATH" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that Preview PowerShell Installed Executable is on system PATH" name="PowerShell Core Installation Checks.Checks that Preview PowerShell Installed Executable is on system PATH" time="0.0063" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="PowerShell Configuration Checks" executed="True" result="Success" success="True" time="0.0401" asserts="0" description="PowerShell Configuration Checks">
            <results>
              <test-case description="Checks if PowerShell Configuration File exists" name="PowerShell Configuration Checks.Checks if PowerShell Configuration File exists" time="0.002" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks if PowerShell Configuration File is not empty" name="PowerShell Configuration Checks.Checks if PowerShell Configuration File is not empty" time="0.0025" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks if PowerShell Configuration File is valid JSON" name="PowerShell Configuration Checks.Checks if PowerShell Configuration File is valid JSON" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="X:\system\powershell-profile\Tests\Windows\Registry.Tests.ps1" executed="True" result="Success" success="True" time="0.0688" asserts="0" description="X:\system\powershell-profile\Tests\Windows\Registry.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Windows Registry Configuration" executed="True" result="Success" success="True" time="0.0127" asserts="0" description="Windows Registry Configuration">
            <results>
              <test-case description="Checks that Windows Update registry path exists" name="Windows Registry Configuration.Checks that Windows Update registry path exists" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that automatic updates are enabled" name="Windows Registry Configuration.Checks that automatic updates are enabled" time="0.0054" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="X:\system\powershell-profile\Tests\Windows\SSH.Tests.ps1" executed="True" result="Success" success="True" time="0.6956" asserts="0" description="X:\system\powershell-profile\Tests\Windows\SSH.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Testing SSH Configuration and Keys" executed="True" result="Success" success="True" time="0.089" asserts="0" description="Testing SSH Configuration and Keys">
            <results>
              <test-case description="Checks ssh command is available" name="Testing SSH Configuration and Keys.Checks ssh command is available" time="0.0099" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that the SSH Agent is running" name="Testing SSH Configuration and Keys.Checks that the SSH Agent is running" time="0.003" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks ssh-agent service is set to Automatic" name="Testing SSH Configuration and Keys.Checks ssh-agent service is set to Automatic" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that the SSH directory exists" name="Testing SSH Configuration and Keys.Checks that the SSH directory exists" time="0.0025" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that the SSH config file exists" name="Testing SSH Configuration and Keys.Checks that the SSH config file exists" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that the RSA keys exist" name="Testing SSH Configuration and Keys.Checks that the RSA keys exist" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that the ECDSA keys exist" name="Testing SSH Configuration and Keys.Checks that the ECDSA keys exist" time="0.0013" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that the RSA keys are not empty" name="Testing SSH Configuration and Keys.Checks that the RSA keys are not empty" time="0.0302" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that the ECDSA keys are not empty" name="Testing SSH Configuration and Keys.Checks that the ECDSA keys are not empty" time="0.024" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that the SSH config file is not empty" name="Testing SSH Configuration and Keys.Checks that the SSH config file is not empty" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that the SSH config file contains the correct permissions" name="Testing SSH Configuration and Keys.Checks that the SSH config file contains the correct permissions" time="0.0026" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="GitHub SSH Checks" executed="True" result="Success" success="True" time="0.6344" asserts="0" description="GitHub SSH Checks">
            <results>
              <test-case description="Checks can connect to github via ssh" name="GitHub SSH Checks.Checks can connect to github via ssh" time="0.5415" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="X:\system\powershell-profile\Tests\Windows\VSCode.Tests.ps1" executed="True" result="Success" success="True" time="1.0218" asserts="0" description="X:\system\powershell-profile\Tests\Windows\VSCode.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Visual Studio Code Installation and Configuration" executed="True" result="Success" success="True" time="0.9596" asserts="0" description="Visual Studio Code Installation and Configuration">
            <results>
              <test-case description="Checks that Visual Studio Code is installed" name="Visual Studio Code Installation and Configuration.Checks that Visual Studio Code is installed" time="0.0017" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that the settings.json file exists" name="Visual Studio Code Installation and Configuration.Checks that the settings.json file exists" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that the extensions directory exists" name="Visual Studio Code Installation and Configuration.Checks that the extensions directory exists" time="0.0025" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that the PowerShell extension is installed" name="Visual Studio Code Installation and Configuration.Checks that the PowerShell extension is installed" time="0.9478" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="X:\system\powershell-profile\Tests\Windows\WindowsTerminal.Tests.ps1" executed="True" result="Success" success="True" time="0.1002" asserts="0" description="X:\system\powershell-profile\Tests\Windows\WindowsTerminal.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Windows Terminal Installation and Configuration" executed="True" result="Success" success="True" time="0.0311" asserts="0" description="Windows Terminal Installation and Configuration">
            <results>
              <test-case description="Checks that Windows Terminal is installed" name="Windows Terminal Installation and Configuration.Checks that Windows Terminal is installed" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that the settings.json file exists" name="Windows Terminal Installation and Configuration.Checks that the settings.json file exists" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that the settings.json file is not empty" name="Windows Terminal Installation and Configuration.Checks that the settings.json file is not empty" time="0.0167" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that the default profile is set to PowerShell" name="Windows Terminal Installation and Configuration.Checks that the default profile is set to PowerShell" time="0.003" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="X:\system\powershell-profile\Tests\Windows\WSL.Tests.ps1" executed="True" result="Success" success="True" time="0.2043" asserts="0" description="X:\system\powershell-profile\Tests\Windows\WSL.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="WSL Installation and Configuration" executed="True" result="Success" success="True" time="0.1327" asserts="0" description="WSL Installation and Configuration">
            <results>
              <test-case description="Checks that WSL is installed" name="WSL Installation and Configuration.Checks that WSL is installed" time="0.002" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that WSL version 2 is installed" name="WSL Installation and Configuration.Checks that WSL version 2 is installed" time="0.0606" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Checks that at least one Linux distribution is installed" name="WSL Installation and Configuration.Checks that at least one Linux distribution is installed" time="0.0658" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>